"
This class and its peers provides the means to identify what is needed in a Smalltalk code generator.

If the generator writes a "".ST"" file, it needs to be compatible with ""file-in"" function.

The classes in this category are here just to see what is generated by file-out
and/or to see if generated or modified files can ""file-in"" correctly.

DO NOT CHANGE THE COMMENTS IN THE OTHER CLASSES.
"
Class {
	#name : #HumFileIn,
	#superclass : #Object,
	#instVars : [
		'someInstanceVariable'
	],
	#category : #'Hum-FileIn'
}

{ #category : #rendering }
HumFileIn >> anotherMethod: anArgument2 [
	"This is a second method to check for iteration anomolies."
	| localVariable2 |
	"Another minor edit."
	localVariable2 := anArgument2.
	
]

{ #category : #accessing }
HumFileIn >> someMethod: anArgument [
	"This method provides means to test file in from generated code."
	|  |
	someInstanceVariable := anArgument.
	"Minor Edit"
	^someInstanceVariable.
	
]
